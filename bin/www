#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var fs=require('fs');
var debug = require('debug')('project:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var isServer = true;
var clients = [];

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io')(server);
io.on('connection', function (socket) {



if(clients.length==0)
{
  socket.emit("isServer",true);	
}else{
 socket.emit("isServer",false);	
}

clients.push(socket);



// convenience function to log server messages on the client
  function log() {
    var array = ['Message from server:'];
    array.push.apply(array, arguments);
    socket.emit('log', array);
  }

  socket.on('message', function(message) {
    log('Client said: ', message);
    // for a real app, would be room-only (not broadcast)
    socket.broadcast.emit('message', message);
  });

  socket.on('create or join', function(room) {
    log('Received request to create or join room ' + room);

    var numClients = clients.length;
    log('Room ' + room + ' now has ' + numClients + ' client(s)');

    if (numClients === 1) {
      socket.join(room);
      log('Client ID ' + socket.id + ' created room ' + room);
      socket.emit('created', room, socket.id);

    } else if (numClients === 2) {
      log('Client ID ' + socket.id + ' joined room ' + room);
      io.sockets.in(room).emit('join', room);
      socket.join(room);
      socket.emit('joined', room, socket.id);
      io.sockets.in(room).emit('ready');
    } else { // max two clients
      socket.emit('full', room);
    }
  });

  socket.on('ipaddr', function() {
    var ifaces = os.networkInterfaces();
    for (var dev in ifaces) {
      ifaces[dev].forEach(function(details) {
        if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
          socket.emit('ipaddr', details.address);
        }
      });
    }
  });

  socket.on('bye', function(){
    clients.pop(socket);
    console.log('received bye');
  });
	
  var videoStream;
  
  socket.on('video-start', function(){
    console.log('video-start');
    videoStream = fs.createWriteStream('video.webm');
    //videoStream.write(chunk);
  });
  socket.on('video', function(chunk){
    console.log('data');
    videoStream.write(chunk);
  });  
  socket.on('video-end', function(){
    console.log('video-end');
    videoStream.end();
  });

 socket.on('disconnect', function() {
      console.log('Got disconnect!');

      var i = clients.indexOf(socket);
      clients.splice(i, 1);
   });

socket.on('sendImage',function(data){
fs.writeFile('myFile.png', data, function(err) {
    if(err)
	console.log(err);
  });
});


fs.readFile(__dirname+'/images/image1.png', function(err, buffer){
	if(err)
	{ 
		console.log(err);
		return ;
	}
        socket.emit('image', { buffer: buffer });
    });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
